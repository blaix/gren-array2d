module Main exposing ( main )


import Array2d
import Expect
import Fuzz exposing (Fuzzer)
import Math
import Test exposing (Test, describe, fuzz, fuzz2, fuzz3, test, todo, skip)
import Test.Runner.Node exposing (Program, run)


main : Program
main =
    run <|
        describe "Array2d"
        
            -- Initialize
            [ testInitialize
            , testRepeat

            -- Transform
            , testMap
            , testIndexedMap
            , testFoldl
            , testFoldr
            , testFilter
            , testFilterMap

            -- Query
            , testGet
            , testSize
            , testFindFirst
            , testFindLast
            , testMember
            , testAny
            , testAll
            , testMinimum
            , testMaximum

            -- Modify
            , testSet
            , testUpdate

            -- TODO: semantics for push, combine, deconstruct, and sort functions?

            , fuzzGetSet
            ]


testInitialize : Test
testInitialize =
    test "initialize" <| \_ ->
        Array2d.initialize 2 3 (\x y -> { x = x, y = y })
            |> Expect.equal
                [ [ {x=0, y=0}, {x=1, y=0} ]
                , [ {x=0, y=1}, {x=1, y=1} ]
                , [ {x=0, y=2}, {x=1, y=2} ]
                ]


testRepeat : Test
testRepeat =
    test "repeat" <| \_ ->
        Array2d.repeat 3 2 'a'
            |> Expect.equal
                [ [ 'a', 'a', 'a' ]
                , [ 'a', 'a', 'a' ] 
                ]


testMap : Test
testMap =
    test "map" <| \_ ->
        [ [ 1, 2, 3 ]
        , [ 4, 5, 6 ]
        , [ 7, 8, 9 ]
        ]
            |> Array2d.map negate
            |> Expect.equal
                [ [ -1, -2, -3 ]
                , [ -4, -5, -6 ]
                , [ -7, -8, -9 ]
                ]


testIndexedMap : Test
testIndexedMap =
    test "indexedMap" <| \_ ->
        [ [ 1, 2 ]
        , [ 3, 4 ]
        ]
            |> Array2d.indexedMap (\x y val -> { x = x, y = y, val = val + 1 })
            |> Expect.equal
                [ [ { x = 0, y = 0, val = 2 }, { x = 1, y = 0, val = 3 } ]
                , [ { x = 0, y = 1, val = 4 }, { x = 1, y = 1, val = 5 } ]
                ]


testFoldl : Test
testFoldl =
    test "foldl" <| \_ ->
        [ [ 1, 2, 3 ]
        , [ 4, 5, 6 ]
        ]
            |> Array2d.foldl (+) 0
            |> Expect.equal 21
            

testFoldr : Test
testFoldr =
    test "foldr" <| \_ ->
        [ [ 1, 2 ]
        , [ 3, 4 ]
        ]
            |> Array2d.foldr (-) 0
            |> Expect.equal -2


testFilter : Test
testFilter =
    test "filter" <| \_ ->
        [ [ 1, 2, 3 ] 
        , [ 4, 5, 6 ]
        , [ 7, 8, 9 ]
        ]
            |> Array2d.filter (\n -> n < 5) 
            |> Expect.equal
                [ [ 1, 2, 3 ]
                , [ 4 ]
                , []
                ]


testFilterMap : Test
testFilterMap =
    test "filterMap" <| \_ ->
        [ [ "3", "not a number", "-5" ]
        , [ "also not a number " ]
        ]
            |> Array2d.filterMap String.toInt
            |> Expect.equal
                [ [ 3, -5 ]
                , []
                ]


testGet : Test
testGet =
    let
        array2d =
            [ [ 1, 4 ]
            , [ 5, 2 ]
            , [ 3, 6 ]
            ]
    in
    describe "get"
        [ test "in bounds" <| \_ ->
            [ Array2d.get 0 0 array2d
            , Array2d.get 1 1 array2d
            , Array2d.get 2 0 array2d
            , Array2d.get 0 1 array2d
            , Array2d.get 1 0 array2d
            , Array2d.get 2 1 array2d
            ]
                |> Expect.equalArrays
                    [ Just 1
                    , Just 2
                    , Just 3
                    , Just 4
                    , Just 5
                    , Just 6 
                    ]
        , test "out of bounds row" <| \_ ->
            Array2d.get 3 0 array2d
                |> Expect.equal Nothing
        , test "out of bounds col" <| \_ ->
            Array2d.get 0 3 array2d
                |> Expect.equal Nothing
        , test "out of bounds row and col" <| \_ ->
            Array2d.get 3 3 array2d
                |> Expect.equal Nothing
        ]


testSize : Test
testSize =
    test "size" <| \_ ->
        [ Array2d.size []
        , Array2d.size [[]]
        , Array2d.size [[1]]
        , Array2d.size [[1], []]
        , Array2d.size [[1, 2]]
        , Array2d.size [[1], [2]]
        , Array2d.size [[1, 2], [3]]
        , Array2d.size [[1, 2], [3, 4]]
        ]
            |> Expect.equalArrays
                [ 0, 0, 1, 1, 2, 2, 3, 4 ]


testFindFirst : Test
testFindFirst =
    let
        array2d =
            [ [ 1, 2 ]
            , [ 3, 4 ]
            ]
    in
    test "findFirst" <| \_ ->
        [ Array2d.findFirst (\n -> n > 0) array2d
        , Array2d.findFirst (\n -> n > 1) array2d
        , Array2d.findFirst (\n -> n > 2) array2d
        , Array2d.findFirst (\n -> n > 3) array2d
        , Array2d.findFirst (\n -> n > 4) array2d
        , Array2d.findFirst (\n -> n < 1) array2d
        ]
            |> Expect.equalArrays
                [ Just 1
                , Just 2
                , Just 3
                , Just 4
                , Nothing
                , Nothing
                ]


testFindLast : Test
testFindLast =
    let
        array2d =
            [ [ 1, 2 ]
            , [ 3, 4 ]
            ]
    in
    test "findLast" <| \_ ->
        [ Array2d.findLast (\n -> n < 2) array2d
        , Array2d.findLast (\n -> n < 3) array2d
        , Array2d.findLast (\n -> n < 4) array2d
        , Array2d.findLast (\n -> n < 5) array2d
        , Array2d.findLast (\n -> n < 1) array2d
        , Array2d.findLast (\n -> n > 4) array2d
        ]
            |> Expect.equalArrays
                [ Just 1
                , Just 2
                , Just 3
                , Just 4
                , Nothing
                , Nothing
                ]


testMember : Test
testMember =
    let
        array2d =
            [ [ 1, 2 ]
            , [ 3, 4 ]
            ]
    in
    test "member" <| \_ ->
        [ Array2d.member 1 array2d
        , Array2d.member 2 array2d
        , Array2d.member 3 array2d
        , Array2d.member 4 array2d
        , Array2d.member 5 array2d
        , Array2d.member 0 array2d
        ]
            |> Expect.equalArrays
                [ True
                , True
                , True
                , True
                , False
                , False
                ]


testAny : Test
testAny =
    test "any" <| \_ ->
        [ Array2d.any isEven [ [ 1, 2 ], [ 3, 4 ] ]
        , Array2d.any isEven [ [ 1, 3 ], [ 3, 5 ] ]
        , Array2d.any isEven [[]]
        , Array2d.any isEven []
        ]
            |> Expect.equalArrays
                [ True
                , False
                , False
                , False
                ]


testAll : Test
testAll =
    test "all" <| \_ ->
        [ Array2d.all isEven [ [ 1, 2 ], [ 3, 4 ] ]
        , Array2d.all isEven [ [ 2, 4 ], [ 6, 8 ] ]
        , Array2d.all isEven [[]]
        , Array2d.all isEven []
        ]
            |> Expect.equalArrays
                [ False
                , True
                , True
                , True
                ]


testMinimum : Test
testMinimum =
    test "minimum" <| \_ ->
        [ Array2d.minimum [[ 3, 2 ], [ 1 ]]
        , Array2d.minimum [[ 3, 2 ], [ 4 ]]
        , Array2d.minimum [[]]
        , Array2d.minimum []
        ]
            |> Expect.equalArrays
                [ Just 1
                , Just 2
                , Nothing
                , Nothing
                ]


testMaximum : Test
testMaximum =
    test "maximum" <| \_ ->
        [ Array2d.maximum [[ 3, 2 ], [ 1 ]]
        , Array2d.maximum [[ 3, 2 ], [ 4 ]]
        , Array2d.maximum [[]]
        , Array2d.maximum []
        ]
            |> Expect.equalArrays
                [ Just 3
                , Just 4
                , Nothing
                , Nothing
                ]


testSet : Test
testSet =
    let
        array2d =
            [ [ 0, 0 ]
            , [ 0, 0 ]
            ]
    in
    test "set" <| \_ ->
        array2d
            |> Array2d.set 0 0 1
            |> Array2d.set 0 1 2
            |> Array2d.set 1 0 3
            |> Array2d.set 1 1 4
            |> Array2d.set 1 2 5
            |> Array2d.set 2 1 6
            |> Array2d.set 2 2 7
            |> Expect.equalArrays
                [ [ 1, 2 ]
                , [ 3, 4 ]
                ]


testUpdate : Test
testUpdate =
    let
        array2d =
            [ [ 1, 2 ]
            , [ 3, 4 ]
            ]

        double =
            (*) 2
    in
    test "update" <| \_ ->
        array2d
            |> Array2d.update 0 0 double
            |> Array2d.update 0 1 double
            |> Array2d.update 1 0 double
            |> Array2d.update 1 1 double
            |> Array2d.update 1 2 double
            |> Array2d.update 2 1 double
            |> Array2d.update 2 2 double
            |> Expect.equalArrays
                [ [ 2, 4 ]
                , [ 6, 8 ]
                ]


fuzzGetSet : Test
fuzzGetSet =
    let
        array2d =
            [ [ 0, 0, 0, 0 ]
            , [ 0, 0, 0, 0 ]
            , [ 0, 0, 0, 0 ]
            ]

        row =
            Fuzz.intRange 0 2

        col =
            Fuzz.intRange 0 3

        val =
            Fuzz.int
    in
    describe "fuzz test get and set"
        [ fuzz3 row col val "in bounds" <| \r c v ->
            array2d
                |> Array2d.set r c v
                |> Array2d.get r c
                |> Expect.equal (Just v)

        , fuzz2 col val "row out of bounds" <| \c v ->
            array2d
                |> Array2d.set 3 c v
                |> Expect.equal array2d
        , fuzz2 row val "col out of bounds" <| \r v ->
            array2d
                |> Array2d.set r 4 v
                |> Expect.equal array2d
        ]


isEven : Int -> Bool
isEven n =
    Math.modBy 2 n == 0
